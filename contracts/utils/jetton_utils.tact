import "./types.tact";

fun sendJettons(
    receiver: Address,
    amount: Int,
    minterAddress: Address,
    jettonWalletCode: Cell,
    forwardPayload: Slice
) {
    let thisContractJettonWallet = calculateJettonWalletAddress(
        myAddress(),
        minterAddress,
        jettonWalletCode,
    );

    message(MessageParameters {
        to: thisContractJettonWallet,
        value: 0,
        body: JettonTransfer {
            queryId: 0,
            amount,
            destination: receiver,
            responseDestination: myAddress(),
            customPayload: null,
            forwardTonAmount: 0,
            forwardPayload,
        }.toCell(),
        mode: SendRemainingValue,
    });
}

inline fun calculateJettonWalletAddress(
    owner: Address,
    minterAddress: Address,
    jettonWalletCode: Cell
): Address {
    let initData = getJettonWalletStateInit(owner, minterAddress, jettonWalletCode);
    return contractAddress(StateInit { code: jettonWalletCode, data: initData });
}

inline fun getJettonWalletStateInit(
    owner: Address,
    minterAddress: Address,
    jettonWalletCode: Cell
): Cell {
    return JettonWalletStateInit {
        owner,
        master: minterAddress,
        jettonWalletCode,
    }.toCell();
}
